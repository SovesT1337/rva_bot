package commands

import (
	"fmt"
	"strings"

	"x.localhost/rvabot/internal/database"
	"x.localhost/rvabot/internal/errors"
	"x.localhost/rvabot/internal/logger"
	"x.localhost/rvabot/internal/states"
	"x.localhost/rvabot/internal/telegram"
)

func sendErrorMessage(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface, err error) states.State {
	userMsg := errors.HandleError(err)
	if userMsg == "" {
		userMsg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
	}

	telegram.EditMessage(botUrl, chatId, messageId, "‚ùå "+userMsg, telegram.CreateStartKeyboard(chatId, repo))
	return states.SetStartKeyboard()
}

func SendHelpMessage(botUrl string, chatId int, messageId int) states.State {
	telegram.EditMessage(botUrl, chatId, messageId, "üëã <b>RVA Academy Bot</b>\n\n"+
		"üìã –ö–æ–º–∞–Ω–¥—ã:\n"+
		"/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"+
		"/help - —Å–ø—Ä–∞–≤–∫–∞\n"+
		"/admin - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", telegram.CreateNavigationKeyboard())
	return states.SetStartKeyboard()
}

func SendAccessDeniedMessage(botUrl string, chatId int, messageId int) states.State {
	telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n"+
		"–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", telegram.CreateBaseKeyboard())
	return states.SetStartKeyboard()
}

func SendAdminPanelMessage(botUrl string, chatId int, messageId int) states.State {
	telegram.EditMessage(botUrl, chatId, messageId, "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n"+
		"", telegram.CreateAdminKeyboard())
	return states.SetAdminKeyboard()
}

func SendTrainersMenuMessage(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	trainers, err := repo.GetTrainers()
	if err != nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤</b>\n\n"+
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", telegram.CreateBackToAdminKeyboard())
		return states.SetAdminKeyboard()
	}

	message := "üë®‚Äçüè´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏</b>\n\n"
	if len(trainers) == 0 {
		message += "üìù <b>–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –ø—É—Å—Ç</b>\n\n" +
			"üë®‚Äçüè´ –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
	} else {
		message += "üë• <b>–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:</b>\n\n"
		for i, trainer := range trainers {
			message += fmt.Sprintf("%d. <b>%s</b>\n", i+1, trainer.Name)
			if trainer.Info != "" {
				message += fmt.Sprintf("   üìÑ %s\n", trainer.Info)
			}
			message += "\n"
		}
	}

	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateTrainersListWithActionsKeyboard(trainers))
	return states.SetAdminKeyboard()
}

func SendTracksMenuMessage(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	tracks, err := repo.GetTracks()
	if err != nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Å—Å</b>\n\n"+
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", telegram.CreateBackToAdminKeyboard())
		return states.SetAdminKeyboard()
	}

	message := "üèÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å–∞–º–∏</b>\n\n"
	if len(tracks) == 0 {
		message += "üì≠ <b>–°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Å—Å –ø—É—Å—Ç</b>\n\n" +
			"üèÅ –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞—Å—Å—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
	} else {
		message += "üèÅ <b>–°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Å—Å:</b>\n\n"
		for i, track := range tracks {
			message += fmt.Sprintf("%d. <b>%s</b>\n", i+1, track.Name)
			if track.Info != "" {
				message += fmt.Sprintf("   üìÑ %s\n", track.Info)
			}
			message += "\n"
		}
	}

	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateTracksListWithActionsKeyboard(tracks))
	return states.SetAdminKeyboard()
}

func SendScheduleMenuMessage(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	trainings, err := repo.GetTrainings()
	if err != nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"+
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", telegram.CreateBackToAdminKeyboard())
		return states.SetAdminKeyboard()
	}

	message := "üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</b>\n\n"
	if len(trainings) == 0 {
		message += "üì≠ <b>–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—É—Å—Ç</b>\n\n" +
			"üìÖ –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
	} else {
		message += formatTrainingsListForAdmin(trainings, repo)
	}

	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateTrainingsListWithActionsKeyboard(trainings))
	return states.SetAdminKeyboard()
}

func SendOperationCancelledMessage(botUrl string, chatId int, messageId int) states.State {
	telegram.EditMessage(botUrl, chatId, messageId, "üö´ <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"+
		"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ.", telegram.CreateBaseKeyboard())
	return states.SetStartKeyboard()
}

func SendOperationCancelledWithTrainersMenu(botUrl string, chatId int, messageId int) states.State {
	telegram.EditMessage(botUrl, chatId, messageId, "üö´ <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"+
		"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ.", telegram.CreateBackToTrainersMenuKeyboard())
	return states.SetAdminKeyboard()
}

func SendOperationCancelledWithTracksMenu(botUrl string, chatId int, messageId int) states.State {
	telegram.EditMessage(botUrl, chatId, messageId, "üö´ <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"+
		"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ.", telegram.CreateBackToTracksMenuKeyboard())
	return states.SetAdminKeyboard()
}

func SendOperationCancelledWithScheduleMenu(botUrl string, chatId int, messageId int) states.State {
	telegram.EditMessage(botUrl, chatId, messageId, "üö´ <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"+
		"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ.", telegram.CreateBackToScheduleMenuKeyboard())
	return states.SetAdminKeyboard()
}

func Help(botUrl string, ChatId int) states.State {
	telegram.SendMessage(botUrl, ChatId, "üéì <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RVA Academy Bot!</b>\n\n"+
		"ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –∏ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏.\n\n"+
		"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"+
		"üè† /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"+
		"‚ùì /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"+
		"‚öôÔ∏è /admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"+
		"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</i>", telegram.CreateNavigationKeyboard())
	return states.SetStartKeyboard()
}

func Start(botUrl string, chatId int, repo database.ContentRepositoryInterface) states.State {
	telegram.SendMessage(botUrl, chatId,
		"üéØ <b>RVA Academy Bot</b>\n\n"+
			"üèÉ‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!\n\n", telegram.CreateStartKeyboard(chatId, repo))
	return states.SetStartKeyboard()
}

func ReturnToStart(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	telegram.EditMessage(botUrl, chatId, messageId,
		"üèÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RVA Academy!\n\n", telegram.CreateStartKeyboard(chatId, repo))
	return states.SetStartKeyboard()
}

func Info(botUrl string, chatId int, messageId int) states.State {
	telegram.EditMessage(botUrl, chatId, messageId, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RVA Academy\n\n"+
		"", telegram.CreateInfoKeyboard())
	return states.SetStartKeyboard()
}

func InfoTrainer(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	trainers, err := repo.GetTrainers()
	if err != nil {
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	message := formatTrainersListForUsers(trainers)
	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateBackToInfoKeyboard())
	return states.SetStartKeyboard()
}

func InfoTrack(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	tracks, err := repo.GetTracks()
	if err != nil {
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	message := formatTracksListForUsers(tracks)
	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateBackToInfoKeyboard())
	return states.SetStartKeyboard()
}

func InfoFormat(botUrl string, chatId int, messageId int) states.State {
	message := "üìö <b>–§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏–π:</b>\n\n" +
		"‚Ä¢ üßò <b>–†–∞–∑–º–∏–Ω–∫–∞</b> - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –≤–∞—Å –∫ –Ω–∞–≥—Ä—É–∑–∫–µ!\n\n" +
		"‚Ä¢ üìù <b>–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å</b> - –æ—Å–≤–µ—â–∞—é—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª–∞ \"–∏–∑ –∫–Ω–∏–∂–∫–∏\", –Ω–æ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–æ —Ç–æ, –∫–∞–∫ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –º–∞—à–∏–Ω—É –ª—É—á—à–µ, –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏–∑ –∏—Ö –∫–∞—Ä—å–µ—Ä—ã\n\n" +
		"‚Ä¢ üèé <b>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å</b> - 30-40 –º–∏–Ω—É—Ç –∑–∞–µ–∑–¥–æ–≤, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–º–µ–Ω–∏—è!\n\n" +
		"‚Ä¢ üìù <b>–†–∞–∑–±–æ—Ä –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b> - –∫—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∑–∞–Ω—è—Ç–∏—è –∏ –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–æ, –Ω–∞–¥ —á–µ–º –Ω–∞–¥–æ —Ä–∞–±–æ—Ç–∞—Ç—å\n\n" +
		"‚Ä¢ ‚ù§Ô∏è‚Äçüî• <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è</b> –≤ MIKS KARTING / LONATO –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç –∑–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω-—Ä–∞–∑–±–æ—Ä–∞ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç"

	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateBackToInfoKeyboard())
	return states.SetStartKeyboard()
}

func ViewScheduleUser(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	user, err := repo.GetUserByChatId(chatId)
	if err != nil || user == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"+
			"üîç –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	trainings, err := repo.GetUserTrainings(user.ID)
	if err != nil {
		logger.UserError(chatId, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	if len(trainings) == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "üìÖ <b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"+
			"üìù <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"+
			"üí° –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", telegram.CreateBackToInfoKeyboard())
		return states.SetStartKeyboard()
	}

	message := "üìÖ <b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
	message += formatTrainingsListForUsers(trainings, repo)
	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateBackToInfoKeyboard())
	return states.SetStartKeyboard()
}

func SetUserName(botUrl string, chatId int, update telegram.Update, repo database.ContentRepositoryInterface, state states.State) states.State {
	name := strings.TrimSpace(update.Message.Text)

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
	if len(name) < 2 {
		telegram.SendMessage(botUrl, chatId, "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\n"+
			"–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n"+
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", telegram.CreateCancelKeyboard())
		return states.SetEnterUserName()
	}

	tempData := state.GetTempUserData()
	tempData.Name = name

	message := "üì± <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID</b>\n\n" +
		"<i>–ü—Ä–∏–º–µ—Ä: @username –∏–ª–∏ user123</i>"

	telegram.SendMessage(botUrl, chatId, message, telegram.CreateCancelKeyboard())

	newState := states.SetEnterUserTgId()
	return newState.SetTempUserData(tempData)
}

func SetUserTgId(botUrl string, chatId int, update telegram.Update, repo database.ContentRepositoryInterface, state states.State) states.State {
	tgId := strings.TrimSpace(update.Message.Text)

	// –í–∞–ª–∏–¥–∞—Ü–∏—è TgId
	if len(tgId) < 3 {
		telegram.SendMessage(botUrl, chatId, "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\n"+
			"Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n"+
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", telegram.CreateCancelKeyboard())
		return states.SetEnterUserTgId()
	}

	tempData := state.GetTempUserData()
	tempData.TgId = tgId

	message := fmt.Sprintf("‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"+
		"üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"+
		"üë§ <b>–§–ò–û:</b> %s\n"+
		"üì± <b>Telegram ID:</b> %s\n"+
		"‚úÖ <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö:</b> –î–∞\n\n"+
		"‚ùì <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?</b>",
		tempData.Name, tempData.TgId)

	telegram.SendMessage(botUrl, chatId, message, telegram.CreateConfirmationKeyboard())

	newState := states.SetConfirmUserRegistration()
	return newState.SetTempUserData(tempData)
}

func ConfirmUserRegistration(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface, tempData *states.TempUserData) states.State {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
	if !tempData.DataConsent {
		telegram.EditMessage(botUrl, chatId, messageId,
			"‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"+
				"–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
			telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	logger.UserInfo(chatId, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s (TgId: %s)", tempData.Name, tempData.TgId)

	user := &database.User{
		Name:     tempData.Name,
		TgId:     tempData.TgId,
		ChatId:   chatId,
		IsActive: true,
	}

	id, err := repo.CreateUser(user)
	if err != nil {
		logger.UserError(chatId, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", tempData.Name, err)
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	logger.UserInfo(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: %s (ID: %d, TgId: %s)", tempData.Name, id, tempData.TgId)
	telegram.EditMessage(botUrl, chatId, messageId,
		"üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"+
			"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, "+tempData.Name+"!", telegram.CreateStartKeyboard(chatId, repo))
	return states.SetStartKeyboard()
}

func StartTrainingRegistration(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	user, err := repo.GetUserByChatId(chatId)
	if err != nil || user == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "üèÉ‚Äç‚ôÇÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
			"üìã <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n\n"+
			"–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"+
			"<i>–ù–∞–∂–∏–º–∞—è \"–°–æ–≥–ª–∞—Å–µ–Ω\", –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.</i>",
			telegram.CreateDataConsentKeyboard())

		tempData := &states.TempUserData{}
		state := states.SetUserDataConsent()
		return state.SetTempUserData(tempData)
	}

	tracks, err := repo.GetTracksWithActiveTrainings()
	if err != nil {
		logger.UserError(chatId, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	if len(tracks) == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "üèÅ <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞—Å—Å</b>\n"+
			"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	telegram.EditMessage(botUrl, chatId, messageId, "üèÉ‚Äç‚ôÇÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"üë§ "+user.Name+"\n"+
		"üèÅ <b>–®–∞–≥ 1/3:</b> –¢—Ä–∞—Å—Å–∞", telegram.CreateTrackSelectionForRegistrationKeyboard(tracks))

	tempData := &states.TempRegistrationData{}
	state := states.SetSelectTrackForRegistration()
	return state.SetTempRegistrationData(tempData)
}

func ConfirmTrainingRegistration(botUrl string, chatId int, messageId int, trainingId uint, repo database.ContentRepositoryInterface) states.State {
	training, err := repo.GetTrainingById(trainingId)
	if err != nil || training == nil {
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	user, err := repo.GetUserByChatId(chatId)
	if err != nil || user == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"+
			"üîç –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	existingRegistration, _ := repo.GetTrainingRegistrationByUserAndTraining(user.ID, trainingId)
	if existingRegistration != nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ö†Ô∏è <b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b>\n\n"+
			"üèÉ‚Äç‚ôÇÔ∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n"+
			"üìä <b>–°—Ç–∞—Ç—É—Å:</b> "+existingRegistration.Status, telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	registrations, _ := repo.GetTrainingRegistrationsByTrainingID(trainingId)
	registeredCount := 0
	for _, reg := range registrations {
		if reg.Status == "confirmed" || reg.Status == "pending" {
			registeredCount++
		}
	}

	if registeredCount >= training.MaxParticipants {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç</b>\n\n"+
			"üèÉ‚Äç‚ôÇÔ∏è –ù–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"+
			"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	trainer, _ := repo.GetTrainerByID(training.TrainerID)
	track, _ := repo.GetTrackByID(training.TrackID)

	trainerName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä"
	trackName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞"

	if trainer != nil {
		trainerName = trainer.Name
	}
	if track != nil {
		trackName = track.Name
	}

	message := fmt.Sprintf("‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"üìã <b>–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n\n"+
		"üèÉ‚Äç‚ôÇÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</b> %s\n"+
		"üöó <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> %s\n"+
		"üë®‚Äçüè´ <b>–¢—Ä–µ–Ω–µ—Ä:</b> %s\n"+
		"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> %s\n"+
		"üë• <b>–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç:</b> %d\n\n"+
		"‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?</b>",
		trackName, training.CarCategory, trainerName, training.StartTime.Format("02.01.2006 15:04"), training.MaxParticipants-registeredCount)

	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateTrainingRegistrationConfirmationKeyboard(trainingId))
	return states.SetConfirmTrainingRegistration(trainingId)
}

func ExecuteTrainingRegistration(botUrl string, chatId int, messageId int, trainingId uint, repo database.ContentRepositoryInterface) states.State {
	user, err := repo.GetUserByChatId(chatId)
	if err != nil || user == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"+
			"üîç –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	registration := &database.TrainingRegistration{
		TrainingID: trainingId,
		UserID:     user.ID,
		Status:     "pending",
	}

	regId, err := repo.CreateTrainingRegistration(registration)
	if err != nil {
		logger.UserError(chatId, "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	training, _ := repo.GetTrainingById(trainingId)
	trainer, _ := repo.GetTrainerByID(training.TrainerID)
	track, _ := repo.GetTrackByID(training.TrackID)

	if trainer != nil && trainer.ChatId != 0 {
		trackName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞"
		if track != nil {
			trackName = track.Name
		}

		notificationMessage := fmt.Sprintf("üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"+
			"üë§ %s\n"+
			"üì± %s\n"+
			"üèÉ‚Äç‚ôÇÔ∏è %s\n"+
			"üìÖ %s",
			user.Name, user.TgId, trackName, training.StartTime.Format("02.01.2006 15:04"))

		telegram.SendMessage(botUrl, trainer.ChatId, notificationMessage, telegram.CreateTrainingApprovalKeyboard(regId))
	}

	logger.UserInfo(chatId, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID=%d, TrainingID=%d", regId, trainingId)
	telegram.EditMessage(botUrl, chatId, messageId, "üéâ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"+
		"‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.</b>\n\n"+
		"üì± <b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞.</b>\n"+
		"‚è∞ <b>–û–±—ã—á–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤.</b>", telegram.CreateBaseKeyboard())
	return states.SetStartKeyboard()
}

func BackToTrackSelection(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface, state states.State) states.State {
	user, err := repo.GetUserByChatId(chatId)
	if err != nil || user == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	tracks, err := repo.GetTracksWithActiveTrainings()
	if err != nil {
		logger.UserError(chatId, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	if len(tracks) == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "üèÅ <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞—Å—Å</b>\n"+
			"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	telegram.EditMessage(botUrl, chatId, messageId, "üèÉ‚Äç‚ôÇÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"üë§ "+user.Name+"\n"+
		"üèÅ <b>–®–∞–≥ 1/3:</b> –¢—Ä–∞—Å—Å–∞", telegram.CreateTrackSelectionForRegistrationKeyboard(tracks))

	tempData := &states.TempRegistrationData{}
	newState := states.SetSelectTrackForRegistration()
	return newState.SetTempRegistrationData(tempData)
}

func BackToTrainerSelection(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface, state states.State) states.State {
	tempData := state.GetTempRegistrationData()
	if tempData.TrackID == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</b>\n"+
			"–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	track, err := repo.GetTrackByID(tempData.TrackID)
	if err != nil || track == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–¢—Ä–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	trainers, err := repo.GetTrainersByTrack(tempData.TrackID)
	if err != nil {
		logger.UserError(chatId, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	if len(trainers) == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "üë®‚Äçüè´ <b>–ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤</b>\n"+
			"–ù–∞ —Ç—Ä–∞—Å—Å–µ \""+track.Name+"\" –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	telegram.EditMessage(botUrl, chatId, messageId, "üèÉ‚Äç‚ôÇÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"‚úÖ –¢—Ä–∞—Å—Å–∞: "+track.Name+"\n"+
		"üë®‚Äçüè´ <b>–®–∞–≥ 2/3:</b> –¢—Ä–µ–Ω–µ—Ä", telegram.CreateTrainerSelectionForRegistrationKeyboard(trainers))

	newState := states.SetSelectTrainerForRegistration()
	return newState.SetTempRegistrationData(tempData)
}

func SelectTrackForRegistration(botUrl string, chatId int, messageId int, trackId uint, repo database.ContentRepositoryInterface, state states.State) states.State {
	tempData := state.GetTempRegistrationData()
	tempData.TrackID = trackId

	track, err := repo.GetTrackByID(trackId)
	if err != nil || track == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–¢—Ä–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	trainers, err := repo.GetTrainersByTrack(trackId)
	if err != nil {
		logger.UserError(chatId, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	if len(trainers) == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "üë®‚Äçüè´ <b>–ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤</b>\n"+
			"–ù–∞ —Ç—Ä–∞—Å—Å–µ \""+track.Name+"\" –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	telegram.EditMessage(botUrl, chatId, messageId, "üèÉ‚Äç‚ôÇÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"‚úÖ –¢—Ä–∞—Å—Å–∞: "+track.Name+"\n"+
		"üë®‚Äçüè´ <b>–®–∞–≥ 2/3:</b> –¢—Ä–µ–Ω–µ—Ä", telegram.CreateTrainerSelectionForRegistrationKeyboard(trainers))

	newState := states.SetSelectTrainerForRegistration()
	return newState.SetTempRegistrationData(tempData)
}

func SelectTrainerForRegistration(botUrl string, chatId int, messageId int, trainerId uint, repo database.ContentRepositoryInterface, state states.State) states.State {
	tempData := state.GetTempRegistrationData()
	tempData.TrainerID = trainerId

	trainer, err := repo.GetTrainerByID(trainerId)
	if err != nil || trainer == nil {
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	track, err := repo.GetTrackByID(tempData.TrackID)
	if err != nil || track == nil {
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	trainings, err := repo.GetActiveTrainingsByTrackAndTrainer(tempData.TrackID, trainerId)
	if err != nil {
		logger.UserError(chatId, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	if len(trainings) == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "üìÖ <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"+
			"üèÉ‚Äç‚ôÇÔ∏è <b>–¢—Ä–µ–Ω–µ—Ä:</b> "+trainer.Name+"\n"+
			"üèÅ <b>–¢—Ä–∞—Å—Å–∞:</b> "+track.Name+"\n\n"+
			"üìù <b>–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —ç—Ç–æ–π —Ç—Ä–∞—Å—Å–µ.</b>\n"+
			"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ —Ç—Ä–∞—Å—Å—É.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	for i := 0; i < len(trainings)-1; i++ {
		for j := 0; j < len(trainings)-i-1; j++ {
			if trainings[j].StartTime.After(trainings[j+1].StartTime) {
				trainings[j], trainings[j+1] = trainings[j+1], trainings[j]
			}
		}
	}

	telegram.EditMessage(botUrl, chatId, messageId, "üèÉ‚Äç‚ôÇÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"‚úÖ –¢—Ä–∞—Å—Å–∞: "+track.Name+"\n"+
		"‚úÖ –¢—Ä–µ–Ω–µ—Ä: "+trainer.Name+"\n"+
		"üìÖ <b>–®–∞–≥ 3/3:</b> –í—Ä–µ–º—è", telegram.CreateTrainingTimeSelectionKeyboard(trainings))

	newState := states.SetSelectTrainingTimeForRegistration()
	return newState.SetTempRegistrationData(tempData)
}

func SelectTrainingTimeForRegistration(botUrl string, chatId int, messageId int, trainingId uint, repo database.ContentRepositoryInterface, state states.State) states.State {
	training, err := repo.GetTrainingById(trainingId)
	if err != nil || training == nil {
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	tempData := state.GetTempRegistrationData()
	if training.TrackID != tempData.TrackID || training.TrainerID != tempData.TrainerID {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"+
			"üîç –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç—Ä–∞—Å—Å–µ –∏ —Ç—Ä–µ–Ω–µ—Ä—É.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	return ConfirmTrainingRegistration(botUrl, chatId, messageId, trainingId, repo)
}

func ApproveTrainingRegistration(botUrl string, chatId int, messageId int, registrationId uint, repo database.ContentRepositoryInterface) states.State {
	registration, err := repo.GetTrainingRegistrationByID(registrationId)
	if err != nil || registration == nil {
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	training, _ := repo.GetTrainingById(registration.TrainingID)
	if training == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	trainer, _ := repo.GetTrainerByID(training.TrainerID)
	if trainer == nil || trainer.ChatId != chatId {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ù–µ—Ç –ø—Ä–∞–≤</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	registration.Status = "confirmed"
	err = repo.UpdateTrainingRegistration(registrationId, registration)
	if err != nil {
		logger.UserError(chatId, "–û–¥–æ–±—Ä–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ %d: %v", registrationId, err)
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	user, _ := repo.GetUserByID(registration.UserID)
	track, _ := repo.GetTrackByID(training.TrackID)

	trackName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞"
	if track != nil {
		trackName = track.Name
	}

	if user != nil {
		userMessage := fmt.Sprintf("üéâ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"+
			"‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–º.</b>\n\n"+
			"üèÉ‚Äç‚ôÇÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</b> %s\n"+
			"üöó <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> %s\n"+
			"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> %s\n\n"+
			"üí° <b>–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!</b>",
			trackName, training.CarCategory, training.StartTime.Format("02.01.2006 15:04"))

		telegram.SendMessage(botUrl, user.ChatId, userMessage, telegram.CreateBaseKeyboard())
	}

	// Notify all active admins
	admins, err := repo.GetAdmins()
	if err == nil {
		trainerName := "‚Äî"
		if trainer != nil {
			trainerName = trainer.Name
		}

		userName := "‚Äî"
		userTg := ""
		if user != nil {
			userName = user.Name
			userTg = user.TgId
		}

		adminMessage := fmt.Sprintf("‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
			"üèÅ <b>–¢—Ä–∞—Å—Å–∞:</b> %s\n"+
			"üöó <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> %s\n"+
			"üë®‚Äçüè´ <b>–¢—Ä–µ–Ω–µ—Ä:</b> %s\n"+
			"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> %s\n\n"+
			"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> %s\n"+
			"üì± <b>Telegram:</b> %s",
			trackName, training.CarCategory, trainerName, training.StartTime.Format("02.01.2006 15:04"),
			userName, userTg)

		for _, a := range admins {
			if a.IsActive && a.ChatId != 0 {
				telegram.SendMessage(botUrl, a.ChatId, adminMessage, telegram.CreateBackToAdminKeyboard())
			}
		}
	}

	logger.UserInfo(chatId, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è %d –æ–¥–æ–±—Ä–µ–Ω–∞", registrationId)
	telegram.EditMessage(botUrl, chatId, messageId, "‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>", telegram.CreateBaseKeyboard())
	return states.SetStartKeyboard()
}

func RejectTrainingRegistration(botUrl string, chatId int, messageId int, registrationId uint, repo database.ContentRepositoryInterface) states.State {
	registration, err := repo.GetTrainingRegistrationByID(registrationId)
	if err != nil || registration == nil {
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	training, _ := repo.GetTrainingById(registration.TrainingID)
	if training == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	trainer, _ := repo.GetTrainerByID(training.TrainerID)
	if trainer == nil || trainer.ChatId != chatId {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ù–µ—Ç –ø—Ä–∞–≤</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	registration.Status = "rejected"
	err = repo.UpdateTrainingRegistration(registrationId, registration)
	if err != nil {
		logger.UserError(chatId, "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ %d: %v", registrationId, err)
		return sendErrorMessage(botUrl, chatId, messageId, repo, err)
	}

	user, _ := repo.GetUserByID(registration.UserID)
	track, _ := repo.GetTrackByID(training.TrackID)

	trackName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞"
	if track != nil {
		trackName = track.Name
	}

	if user != nil {
		userMessage := fmt.Sprintf("‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"+
			"üèÉ‚Äç‚ôÇÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</b> %s\n"+
			"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> %s\n\n"+
			"üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.</b>",
			trackName, training.StartTime.Format("02.01.2006 15:04"))

		telegram.SendMessage(botUrl, user.ChatId, userMessage, telegram.CreateBaseKeyboard())
	}

	logger.UserInfo(chatId, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è %d –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", registrationId)
	telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>", telegram.CreateBaseKeyboard())
	return states.SetStartKeyboard()
}

func formatTrainingsListForUsers(trainings []database.Training, repo database.ContentRepositoryInterface) string {

	var builder strings.Builder
	builder.WriteString("üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ RVA Academy</b>\n\n")

	for i, training := range trainings {
		trainer, _ := repo.GetTrainerByID(training.TrainerID)
		trainerName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä"
		if trainer != nil {
			trainerName = trainer.Name
		}

		track, _ := repo.GetTrackByID(training.TrackID)
		trackName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞"
		if track != nil {
			trackName = track.Name
		}

		registrations, _ := repo.GetTrainingRegistrationsByTrainingID(training.ID)
		confirmedCount := 0
		var confirmedUsers []string

		for _, reg := range registrations {
			if reg.Status == "confirmed" {
				confirmedCount++
				user, _ := repo.GetUserByID(reg.UserID)
				userName := "–£—á–∞—Å—Ç–Ω–∏–∫"
				if user != nil {
					userName = user.Name
				}
				confirmedUsers = append(confirmedUsers, userName)
			}
		}

		availableSpots := training.MaxParticipants - confirmedCount
		spotsText := fmt.Sprintf("%d –º–µ—Å—Ç", availableSpots)
		if availableSpots <= 0 {
			spotsText = "‚ùå –ú–µ—Å—Ç –Ω–µ—Ç"
		} else if availableSpots == 1 {
			spotsText = "1 –º–µ—Å—Ç–æ"
		}

		builder.WriteString(fmt.Sprintf("üèÉ‚Äç‚ôÇÔ∏è <b>%d. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</b>\n", i+1))
		builder.WriteString(fmt.Sprintf("üöó <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> %s\n", training.CarCategory))
		builder.WriteString(fmt.Sprintf("üë®‚Äçüè´ <b>–¢—Ä–µ–Ω–µ—Ä:</b> %s\n", trainerName))
		builder.WriteString(fmt.Sprintf("üèÅ <b>–¢—Ä–∞—Å—Å–∞:</b> %s\n", trackName))
		builder.WriteString(fmt.Sprintf("üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> %s\n", training.StartTime.Format("02.01.2006 15:04")))
		builder.WriteString(fmt.Sprintf("üë• <b>–°–≤–æ–±–æ–¥–Ω–æ:</b> %s\n", spotsText))

		if len(confirmedUsers) > 0 {
			builder.WriteString("‚úÖ <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> ")
			var displayNames []string
			for _, fullName := range confirmedUsers {
				parts := strings.Fields(fullName)
				if len(parts) > 0 {
					displayNames = append(displayNames, parts[0])
				}
			}
			builder.WriteString(strings.Join(displayNames, ", "))
			builder.WriteString("\n")
		}

		builder.WriteString("\n")
	}

	builder.WriteString("üí° <i>–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.</i>")

	return builder.String()
}

func formatTrainersListForUsers(trainers []database.Trainer) string {

	var builder strings.Builder
	builder.WriteString("üë• –¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ RVA Academy\n\n")

	for i, trainer := range trainers {
		builder.WriteString(fmt.Sprintf("üë®‚Äçüè´ <b>%d. %s</b>\n", i+1, trainer.Name))
		builder.WriteString(fmt.Sprintf("üì± %s\n", trainer.TgId))
		builder.WriteString(fmt.Sprintf("üìù %s\n\n", trainer.Info))
	}

	return builder.String()
}

func formatTracksListForUsers(tracks []database.Track) string {
	var builder strings.Builder
	builder.WriteString("üèÅ –¢—Ä–∞—Å—Å—ã RVA Academy\n\n")

	for i, track := range tracks {
		builder.WriteString(fmt.Sprintf("üèÅ <b>%d. %s</b>\n", i+1, track.Name))
		builder.WriteString(fmt.Sprintf("üìÑ %s\n\n", track.Info))
	}

	return builder.String()
}

// SuggestTraining - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
func SuggestTraining(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	telegram.EditMessage(botUrl, chatId, messageId, "üí° <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:\n"+
		"‚Ä¢ –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è\n"+
		"‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞—Å—Å–∞\n"+
		"‚Ä¢ –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"+
		"üí¨ <i>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i>", telegram.CreateCancelKeyboard())
	return states.SetSuggestTraining()
}

// ProcessTrainingSuggestion - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
func ProcessTrainingSuggestion(botUrl string, chatId int, update telegram.Update, repo database.ContentRepositoryInterface, state states.State) states.State {
	logger.UserInfo(chatId, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: %s", update.Message.Text)
	message := update.Message.Text

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := repo.GetUserByChatId(chatId)
	logger.UserInfo(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: %v, –æ—à–∏–±–∫–∞: %v", user != nil, err)
	if err != nil || user == nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		userName := fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d", chatId)

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		newUser := &database.User{
			Name:     userName,
			TgId:     fmt.Sprintf("user_%d", chatId),
			ChatId:   chatId,
			IsActive: true,
		}

		userId, err := repo.CreateUser(newUser)
		logger.UserInfo(chatId, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID=%d, –æ—à–∏–±–∫–∞=%v", userId, err)
		if err != nil {
			logger.UserError(chatId, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			telegram.SendMessage(botUrl, chatId, "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"+
				"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", telegram.CreateBaseKeyboard())
			return states.SetStartKeyboard()
		}

		user = &database.User{
			ID:       userId,
			Name:     userName,
			TgId:     fmt.Sprintf("user_%d", chatId),
			ChatId:   chatId,
			IsActive: true,
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
	request := &database.TrainingRequest{
		UserID:     user.ID,
		Message:    message,
		IsReviewed: false,
	}

	requestId, err := repo.CreateTrainingRequest(request)
	logger.UserInfo(chatId, "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ID=%d, –æ—à–∏–±–∫–∞=%v", requestId, err)
	if err != nil {
		logger.UserError(chatId, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: %v", err)
		telegram.SendMessage(botUrl, chatId, "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n"+
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	telegram.SendMessage(botUrl, chatId, "‚úÖ <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"+
		"üìù –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n"+
		"‚è∞ –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"+
		"üí° <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</i>", telegram.CreateBaseKeyboard())
	return states.SetStartKeyboard()
}

func HandleDataConsentYes(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface, state states.State) states.State {
	if state.Type != states.StateSetUserDataConsent {
		logger.UserError(chatId, "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è: %s", state.Type)
		return states.SetError()
	}

	tempData := state.GetTempUserData()
	tempData.DataConsent = true

	message := "üë§ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û</b>\n\n" +
		"<i>–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>"

	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateCancelKeyboard())

	newState := states.SetEnterUserName()
	return newState.SetTempUserData(tempData)
}
