package commands

import (
	"fmt"
	"log"
	"strings"

	"x.localhost/rvabot/internal/database"
	"x.localhost/rvabot/internal/states"
	"x.localhost/rvabot/internal/telegram"
)

func sendErrorMessage(botUrl string, chatId int, messageId int) states.State {
	telegram.EditMessage(botUrl, chatId, messageId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ", telegram.CreateStartKeyboard())
	return states.SetStartKeyboard()
}

func Help(botUrl string, ChatId int) states.State {
	telegram.SendMessage(botUrl, ChatId, "üéì <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RVA Academy Bot!</b>\n\n"+
		"ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –∏ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏.\n\n"+
		"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"+
		"üè† /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"+
		"‚ùì /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"+
		"‚öôÔ∏è /admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"+
		"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</i>", telegram.CreateNavigationKeyboard())
	return states.SetStartKeyboard()
}

func Start(botUrl string, chatId int) states.State {
	telegram.SendMessage(botUrl, chatId, "üéØ <b>RVA Academy Bot</b>\n\n"+
		"üèÉ‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!\n\n", telegram.CreateStartKeyboard())
	return states.SetStartKeyboard()
}

func ReturnToStart(botUrl string, chatId int, messageId int) states.State {
	telegram.EditMessage(botUrl, chatId, messageId, "üèÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RVA Academy!\n\n"+
		"", telegram.CreateStartKeyboard())
	return states.SetStartKeyboard()
}

func Info(botUrl string, chatId int, messageId int) states.State {
	telegram.EditMessage(botUrl, chatId, messageId, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RVA Academy\n\n"+
		"", telegram.CreateInfoKeyboard())
	return states.SetStartKeyboard()
}

func InfoTrainer(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	trainers, err := repo.GetTrainers()
	if err != nil {
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	message := formatTrainersListForUsers(trainers)
	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateBackToInfoKeyboard())
	return states.SetStartKeyboard()
}

func InfoTrack(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	tracks, err := repo.GetTracks()
	if err != nil {
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	message := formatTracksListForUsers(tracks)
	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateBackToInfoKeyboard())
	return states.SetStartKeyboard()
}

func InfoFormat(botUrl string, chatId int, messageId int) states.State {
	message := "–¢—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ, –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"

	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateBackToInfoKeyboard())
	return states.SetStartKeyboard()
}

func ViewScheduleUser(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	trainings, err := repo.GetActiveTrainings()
	if err != nil {
		log.Printf("ERROR: Failed to get active trainings: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	if len(trainings) == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"+
			"üìù <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n"+
			"üí° –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! –ù–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", telegram.CreateBackToInfoKeyboard())
		return states.SetStartKeyboard()
	}

	message := formatTrainingsListForUsers(trainings, repo)
	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateBackToInfoKeyboard())
	return states.SetStartKeyboard()
}

func SetUserName(botUrl string, chatId int, update telegram.Update, repo database.ContentRepositoryInterface, state states.State) states.State {
	name := update.Message.Text

	tempData := state.GetTempUserData()
	tempData.Name = name

	message := fmt.Sprintf("‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"+
		"üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"+
		"üë§ <b>–§–ò–û:</b> %s\n\n"+
		"‚ùì <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?</b>", tempData.Name)

	telegram.SendMessage(botUrl, chatId, message, telegram.CreateConfirmationKeyboard())

	newState := states.SetConfirmUserRegistration()
	return newState.SetTempUserData(tempData)
}

func ConfirmUserRegistration(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface, tempData *states.TempUserData) states.State {
	log.Printf("Creating user: %s (ChatId: %d)", tempData.Name, chatId)

	user := &database.User{
		Name:     tempData.Name,
		ChatId:   chatId,
		IsActive: true,
	}

	id, err := repo.CreateUser(user)
	if err != nil {
		log.Printf("ERROR: Failed to create user %s: %v", tempData.Name, err)
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	log.Printf("User created successfully: %s (ID: %d)", tempData.Name, id)
	telegram.EditMessage(botUrl, chatId, messageId, "üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"+
		"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, "+tempData.Name+"!", telegram.CreateStartKeyboard())
	return states.SetStartKeyboard()
}

func StartTrainingRegistration(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface) states.State {
	user, err := repo.GetUserByChatId(chatId)
	if err != nil || user == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "üèÉ‚Äç‚ôÇÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
			"üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û\n"+
			"<i>–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>", telegram.CreateCancelKeyboard())
		return states.SetEnterUserName()
	}

	tracks, err := repo.GetTracksWithActiveTrainings()
	if err != nil {
		log.Printf("ERROR: Failed to get tracks with active trainings: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	if len(tracks) == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "üèÅ <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞—Å—Å</b>\n"+
			"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	telegram.EditMessage(botUrl, chatId, messageId, "üèÉ‚Äç‚ôÇÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"üë§ "+user.Name+"\n"+
		"üèÅ <b>–®–∞–≥ 1/3:</b> –¢—Ä–∞—Å—Å–∞", telegram.CreateTrackSelectionForRegistrationKeyboard(tracks))

	tempData := &states.TempRegistrationData{}
	state := states.SetSelectTrackForRegistration()
	return state.SetTempRegistrationData(tempData)
}

func ConfirmTrainingRegistration(botUrl string, chatId int, messageId int, trainingId uint, repo database.ContentRepositoryInterface) states.State {
	training, err := repo.GetTrainingById(trainingId)
	if err != nil || training == nil {
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	user, err := repo.GetUserByChatId(chatId)
	if err != nil || user == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"+
			"üîç –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	existingRegistration, _ := repo.GetTrainingRegistrationByUserAndTraining(user.ID, trainingId)
	if existingRegistration != nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ö†Ô∏è <b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b>\n\n"+
			"üèÉ‚Äç‚ôÇÔ∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n"+
			"üìä <b>–°—Ç–∞—Ç—É—Å:</b> "+existingRegistration.Status, telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	registrations, _ := repo.GetTrainingRegistrationsByTrainingID(trainingId)
	registeredCount := 0
	for _, reg := range registrations {
		if reg.Status == "confirmed" || reg.Status == "pending" {
			registeredCount++
		}
	}

	if registeredCount >= training.MaxParticipants {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç</b>\n\n"+
			"üèÉ‚Äç‚ôÇÔ∏è –ù–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"+
			"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	trainer, _ := repo.GetTrainerByID(training.TrainerID)
	track, _ := repo.GetTrackByID(training.TrackID)

	trainerName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä"
	trackName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞"

	if trainer != nil {
		trainerName = trainer.Name
	}
	if track != nil {
		trackName = track.Name
	}

	message := fmt.Sprintf("‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"üìã <b>–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n\n"+
		"üèÉ‚Äç‚ôÇÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</b> %s\n"+
		"üë®‚Äçüè´ <b>–¢—Ä–µ–Ω–µ—Ä:</b> %s\n"+
		"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> %s\n"+
		"üë• <b>–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç:</b> %d\n\n"+
		"‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?</b>",
		trackName, trainerName, training.Time.Format("02.01.2006 15:04"), training.MaxParticipants-registeredCount)

	telegram.EditMessage(botUrl, chatId, messageId, message, telegram.CreateTrainingRegistrationConfirmationKeyboard(trainingId))
	return states.SetConfirmTrainingRegistration(trainingId)
}

func ExecuteTrainingRegistration(botUrl string, chatId int, messageId int, trainingId uint, repo database.ContentRepositoryInterface) states.State {
	user, err := repo.GetUserByChatId(chatId)
	if err != nil || user == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"+
			"üîç –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	registration := &database.TrainingRegistration{
		TrainingID: trainingId,
		UserID:     user.ID,
		Status:     "pending",
	}

	regId, err := repo.CreateTrainingRegistration(registration)
	if err != nil {
		log.Printf("ERROR: Failed to create training registration: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	training, _ := repo.GetTrainingById(trainingId)
	trainer, _ := repo.GetTrainerByID(training.TrainerID)
	track, _ := repo.GetTrackByID(training.TrackID)

	if trainer != nil && trainer.ChatId != 0 {
		trackName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞"
		if track != nil {
			trackName = track.Name
		}

		notificationMessage := fmt.Sprintf("üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"+
			"üë§ %s\n"+
			"üèÉ‚Äç‚ôÇÔ∏è %s\n"+
			"üìÖ %s",
			user.Name, trackName, training.Time.Format("02.01.2006 15:04"))

		telegram.SendMessage(botUrl, trainer.ChatId, notificationMessage, telegram.CreateTrainingApprovalKeyboard(regId))
	}

	log.Printf("Training registration created successfully: ID=%d, UserID=%d, TrainingID=%d", regId, user.ID, trainingId)
	telegram.EditMessage(botUrl, chatId, messageId, "üéâ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"+
		"‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.</b>\n\n"+
		"üì± <b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞.</b>\n"+
		"‚è∞ <b>–û–±—ã—á–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤.</b>", telegram.CreateBaseKeyboard())
	return states.SetStartKeyboard()
}

func BackToTrackSelection(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface, state states.State) states.State {
	user, err := repo.GetUserByChatId(chatId)
	if err != nil || user == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	tracks, err := repo.GetTracksWithActiveTrainings()
	if err != nil {
		log.Printf("ERROR: Failed to get tracks with active trainings: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	if len(tracks) == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "üèÅ <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞—Å—Å</b>\n"+
			"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	telegram.EditMessage(botUrl, chatId, messageId, "üèÉ‚Äç‚ôÇÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"üë§ "+user.Name+"\n"+
		"üèÅ <b>–®–∞–≥ 1/3:</b> –¢—Ä–∞—Å—Å–∞", telegram.CreateTrackSelectionForRegistrationKeyboard(tracks))

	tempData := &states.TempRegistrationData{}
	newState := states.SetSelectTrackForRegistration()
	return newState.SetTempRegistrationData(tempData)
}

func BackToTrainerSelection(botUrl string, chatId int, messageId int, repo database.ContentRepositoryInterface, state states.State) states.State {
	tempData := state.GetTempRegistrationData()
	if tempData.TrackID == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</b>\n"+
			"–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	track, err := repo.GetTrackByID(tempData.TrackID)
	if err != nil || track == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–¢—Ä–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	trainers, err := repo.GetTrainersByTrack(tempData.TrackID)
	if err != nil {
		log.Printf("ERROR: Failed to get trainers by track: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	if len(trainers) == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "üë®‚Äçüè´ <b>–ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤</b>\n"+
			"–ù–∞ —Ç—Ä–∞—Å—Å–µ \""+track.Name+"\" –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	telegram.EditMessage(botUrl, chatId, messageId, "üèÉ‚Äç‚ôÇÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"‚úÖ –¢—Ä–∞—Å—Å–∞: "+track.Name+"\n"+
		"üë®‚Äçüè´ <b>–®–∞–≥ 2/3:</b> –¢—Ä–µ–Ω–µ—Ä", telegram.CreateTrainerSelectionForRegistrationKeyboard(trainers))

	newState := states.SetSelectTrainerForRegistration()
	return newState.SetTempRegistrationData(tempData)
}

func SelectTrackForRegistration(botUrl string, chatId int, messageId int, trackId uint, repo database.ContentRepositoryInterface, state states.State) states.State {
	tempData := state.GetTempRegistrationData()
	tempData.TrackID = trackId

	track, err := repo.GetTrackByID(trackId)
	if err != nil || track == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–¢—Ä–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	trainers, err := repo.GetTrainersByTrack(trackId)
	if err != nil {
		log.Printf("ERROR: Failed to get trainers by track: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	if len(trainers) == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "üë®‚Äçüè´ <b>–ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤</b>\n"+
			"–ù–∞ —Ç—Ä–∞—Å—Å–µ \""+track.Name+"\" –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	telegram.EditMessage(botUrl, chatId, messageId, "üèÉ‚Äç‚ôÇÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"‚úÖ –¢—Ä–∞—Å—Å–∞: "+track.Name+"\n"+
		"üë®‚Äçüè´ <b>–®–∞–≥ 2/3:</b> –¢—Ä–µ–Ω–µ—Ä", telegram.CreateTrainerSelectionForRegistrationKeyboard(trainers))

	newState := states.SetSelectTrainerForRegistration()
	return newState.SetTempRegistrationData(tempData)
}

func SelectTrainerForRegistration(botUrl string, chatId int, messageId int, trainerId uint, repo database.ContentRepositoryInterface, state states.State) states.State {
	tempData := state.GetTempRegistrationData()
	tempData.TrainerID = trainerId

	trainer, err := repo.GetTrainerByID(trainerId)
	if err != nil || trainer == nil {
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	track, err := repo.GetTrackByID(tempData.TrackID)
	if err != nil || track == nil {
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	trainings, err := repo.GetActiveTrainingsByTrackAndTrainer(tempData.TrackID, trainerId)
	if err != nil {
		log.Printf("ERROR: Failed to get trainings by track and trainer: %v", err)
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	if len(trainings) == 0 {
		telegram.EditMessage(botUrl, chatId, messageId, "üìÖ <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"+
			"üèÉ‚Äç‚ôÇÔ∏è <b>–¢—Ä–µ–Ω–µ—Ä:</b> "+trainer.Name+"\n"+
			"üèÅ <b>–¢—Ä–∞—Å—Å–∞:</b> "+track.Name+"\n\n"+
			"üìù <b>–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —ç—Ç–æ–π —Ç—Ä–∞—Å—Å–µ.</b>\n"+
			"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ —Ç—Ä–∞—Å—Å—É.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	for i := 0; i < len(trainings)-1; i++ {
		for j := 0; j < len(trainings)-i-1; j++ {
			if trainings[j].Time.After(trainings[j+1].Time) {
				trainings[j], trainings[j+1] = trainings[j+1], trainings[j]
			}
		}
	}

	telegram.EditMessage(botUrl, chatId, messageId, "üèÉ‚Äç‚ôÇÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n\n"+
		"‚úÖ –¢—Ä–∞—Å—Å–∞: "+track.Name+"\n"+
		"‚úÖ –¢—Ä–µ–Ω–µ—Ä: "+trainer.Name+"\n"+
		"üìÖ <b>–®–∞–≥ 3/3:</b> –í—Ä–µ–º—è", telegram.CreateTrainingTimeSelectionKeyboard(trainings))

	newState := states.SetSelectTrainingTimeForRegistration()
	return newState.SetTempRegistrationData(tempData)
}

func SelectTrainingTimeForRegistration(botUrl string, chatId int, messageId int, trainingId uint, repo database.ContentRepositoryInterface, state states.State) states.State {
	training, err := repo.GetTrainingById(trainingId)
	if err != nil || training == nil {
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	tempData := state.GetTempRegistrationData()
	if training.TrackID != tempData.TrackID || training.TrainerID != tempData.TrainerID {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"+
			"üîç –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç—Ä–∞—Å—Å–µ –∏ —Ç—Ä–µ–Ω–µ—Ä—É.", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	return ConfirmTrainingRegistration(botUrl, chatId, messageId, trainingId, repo)
}

func ApproveTrainingRegistration(botUrl string, chatId int, messageId int, registrationId uint, repo database.ContentRepositoryInterface) states.State {
	registration, err := repo.GetTrainingRegistrationByID(registrationId)
	if err != nil || registration == nil {
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	training, _ := repo.GetTrainingById(registration.TrainingID)
	if training == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	trainer, _ := repo.GetTrainerByID(training.TrainerID)
	if trainer == nil || trainer.ChatId != chatId {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ù–µ—Ç –ø—Ä–∞–≤</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	registration.Status = "confirmed"
	err = repo.UpdateTrainingRegistration(registrationId, registration)
	if err != nil {
		log.Printf("ERROR: Failed to approve training registration %d: %v", registrationId, err)
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	user, _ := repo.GetUserByID(registration.UserID)
	track, _ := repo.GetTrackByID(training.TrackID)

	trackName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞"
	if track != nil {
		trackName = track.Name
	}

	if user != nil {
		userMessage := fmt.Sprintf("üéâ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"+
			"‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–º.</b>\n\n"+
			"üèÉ‚Äç‚ôÇÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</b> %s\n"+
			"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> %s\n\n"+
			"üí° <b>–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!</b>",
			trackName, training.Time.Format("02.01.2006 15:04"))

		telegram.SendMessage(botUrl, user.ChatId, userMessage, telegram.CreateBaseKeyboard())
	}

	log.Printf("Training registration %d approved by trainer %d", registrationId, chatId)
	telegram.EditMessage(botUrl, chatId, messageId, "‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>", telegram.CreateBaseKeyboard())
	return states.SetStartKeyboard()
}

func RejectTrainingRegistration(botUrl string, chatId int, messageId int, registrationId uint, repo database.ContentRepositoryInterface) states.State {
	registration, err := repo.GetTrainingRegistrationByID(registrationId)
	if err != nil || registration == nil {
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	training, _ := repo.GetTrainingById(registration.TrainingID)
	if training == nil {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	trainer, _ := repo.GetTrainerByID(training.TrainerID)
	if trainer == nil || trainer.ChatId != chatId {
		telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ù–µ—Ç –ø—Ä–∞–≤</b>", telegram.CreateBaseKeyboard())
		return states.SetStartKeyboard()
	}

	registration.Status = "rejected"
	err = repo.UpdateTrainingRegistration(registrationId, registration)
	if err != nil {
		log.Printf("ERROR: Failed to reject training registration %d: %v", registrationId, err)
		return sendErrorMessage(botUrl, chatId, messageId)
	}

	user, _ := repo.GetUserByID(registration.UserID)
	track, _ := repo.GetTrackByID(training.TrackID)

	trackName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞"
	if track != nil {
		trackName = track.Name
	}

	if user != nil {
		userMessage := fmt.Sprintf("‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"+
			"üèÉ‚Äç‚ôÇÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</b> %s\n"+
			"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> %s\n\n"+
			"üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.</b>",
			trackName, training.Time.Format("02.01.2006 15:04"))

		telegram.SendMessage(botUrl, user.ChatId, userMessage, telegram.CreateBaseKeyboard())
	}

	log.Printf("Training registration %d rejected by trainer %d", registrationId, chatId)
	telegram.EditMessage(botUrl, chatId, messageId, "‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>", telegram.CreateBaseKeyboard())
	return states.SetStartKeyboard()
}

func formatTrainingsListForUsers(trainings []database.Training, repo database.ContentRepositoryInterface) string {

	var builder strings.Builder
	builder.WriteString("üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ RVA Academy</b>\n\n")

	for i, training := range trainings {
		trainer, _ := repo.GetTrainerByID(training.TrainerID)
		trainerName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä"
		if trainer != nil {
			trainerName = trainer.Name
		}

		track, _ := repo.GetTrackByID(training.TrackID)
		trackName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞"
		if track != nil {
			trackName = track.Name
		}

		registrations, _ := repo.GetTrainingRegistrationsByTrainingID(training.ID)
		confirmedCount := 0
		var confirmedUsers []string

		for _, reg := range registrations {
			if reg.Status == "confirmed" {
				confirmedCount++
				user, _ := repo.GetUserByID(reg.UserID)
				userName := "–£—á–∞—Å—Ç–Ω–∏–∫"
				if user != nil {
					userName = user.Name
				}
				confirmedUsers = append(confirmedUsers, userName)
			}
		}

		availableSpots := training.MaxParticipants - confirmedCount
		spotsText := fmt.Sprintf("%d –º–µ—Å—Ç", availableSpots)
		if availableSpots <= 0 {
			spotsText = "‚ùå –ú–µ—Å—Ç –Ω–µ—Ç"
		} else if availableSpots == 1 {
			spotsText = "1 –º–µ—Å—Ç–æ"
		}

		builder.WriteString(fmt.Sprintf("üèÉ‚Äç‚ôÇÔ∏è <b>%d. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</b>\n", i+1))
		builder.WriteString(fmt.Sprintf("üë®‚Äçüè´ <b>–¢—Ä–µ–Ω–µ—Ä:</b> %s\n", trainerName))
		builder.WriteString(fmt.Sprintf("üèÅ <b>–¢—Ä–∞—Å—Å–∞:</b> %s\n", trackName))
		builder.WriteString(fmt.Sprintf("üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> %s\n", training.Time.Format("02.01.2006 15:04")))
		builder.WriteString(fmt.Sprintf("üë• <b>–°–≤–æ–±–æ–¥–Ω–æ:</b> %s\n", spotsText))

		if len(confirmedUsers) > 0 {
			builder.WriteString("‚úÖ <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> ")
			var displayNames []string
			for _, fullName := range confirmedUsers {
				parts := strings.Fields(fullName)
				if len(parts) > 0 {
					displayNames = append(displayNames, parts[0])
				}
			}
			builder.WriteString(strings.Join(displayNames, ", "))
			builder.WriteString("\n")
		}

		builder.WriteString("\n")
	}

	builder.WriteString("üí° <i>–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.</i>")

	return builder.String()
}

func formatTrainersListForUsers(trainers []database.Trainer) string {

	var builder strings.Builder
	builder.WriteString("üë• –¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ RVA Academy\n\n")

	for i, trainer := range trainers {
		builder.WriteString(fmt.Sprintf("üë®‚Äçüè´ <b>%d. %s</b>\n", i+1, trainer.Name))
		builder.WriteString(fmt.Sprintf("üì± %s\n", trainer.TgId))
		builder.WriteString(fmt.Sprintf("üìù %s\n\n", trainer.Info))
	}

	return builder.String()
}

func formatTracksListForUsers(tracks []database.Track) string {
	var builder strings.Builder
	builder.WriteString("üèÅ –¢—Ä–∞—Å—Å—ã RVA Academy\n\n")

	for i, track := range tracks {
		builder.WriteString(fmt.Sprintf("üèÅ <b>%d. %s</b>\n", i+1, track.Name))
		builder.WriteString(fmt.Sprintf("üìÑ %s\n\n", track.Info))
	}

	return builder.String()
}
