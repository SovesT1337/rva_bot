package telegram

import (
	"fmt"

	"x.localhost/rvabot/internal/database"
)

// –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func CreateEmptyKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
func CreateBaseKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: "start"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥" –∏ "–ü–æ–º–æ—â—å"
func CreateNavigationKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: "start"},
				{Text: "‚ùì –ü–æ–º–æ—â—å", CallbackData: "help"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
func CreateBackToAdminKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ", CallbackData: "admin"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
func CreateBackToInfoKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: "Info"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Ç—Ä–µ–Ω–µ—Ä–æ–≤
func CreateBackToTrainersMenuKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ç—Ä–µ–Ω–µ—Ä–∞–º", CallbackData: "trainersMenu"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Ç—Ä–∞—Å—Å
func CreateBackToTracksMenuKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: "tracksMenu"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func CreateBackToScheduleMenuKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: "scheduleMenu"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
func CreateCancelTrainerCreationKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: "cancel"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞—Å—Å—ã
func CreateCancelTrackCreationKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: "cancel"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
func CreateCancelTrainingCreationKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: "cancel"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func CreateCancelUserRegistrationKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: "cancel"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func CreateStartKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", CallbackData: "BookTraining"},
			},
			{
				{Text: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö", CallbackData: "Info"},
			},
			{
				{Text: "üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥ ELO", CallbackData: "Raiting"},
			},
			{
				{Text: "üõí –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞", URL: "https://dudarevmotorsport.ru/"},
			},
			{
				{Text: "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", CallbackData: "admin"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func CreateAdminKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—ã", CallbackData: "trainersMenu"},
				{Text: "üèÅ –¢—Ä–∞—Å—Å—ã", CallbackData: "tracksMenu"},
			},
			{
				{Text: "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", CallbackData: "scheduleMenu"},
			},
			{
				{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: "start"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏
func CreateTrainersMenuKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞", CallbackData: "createTrainer"},
				{Text: "üë• –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤", CallbackData: "viewTrainers"},
			},
			{
				{Text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", CallbackData: "editTrainer"},
				{Text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", CallbackData: "deleteTrainer"},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ", CallbackData: "admin"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Å—Å–∞–º–∏
func CreateTracksMenuKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Å—Å—É", CallbackData: "createTrack"},
				{Text: "üèÅ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Å—Å", CallbackData: "viewTracks"},
			},
			{
				{Text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", CallbackData: "editTrack"},
				{Text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", CallbackData: "deleteTrack"},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ", CallbackData: "admin"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
func CreateScheduleMenuKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", CallbackData: "createSchedule"},
			},
			{
				{Text: "üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", CallbackData: "viewSchedule"},
			},
			{
				{Text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", CallbackData: "editSchedule"},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ", CallbackData: "admin"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
func CreateInfoKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤", CallbackData: "infoTrainer"},
			},
			{
				{Text: "üèÅ –¢—Ä–∞—Å—Å—ã", CallbackData: "infoTrack"},
			},
			{
				{Text: "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", CallbackData: "viewScheduleUser"},
			},
			{
				{Text: "üìã –§–æ—Ä–º–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", CallbackData: "infoFormat"},
			},
			{
				{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: "start"},
			},
		},
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
func CreateConfirmationKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", CallbackData: "confirm"},
				{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "cancel"},
			},
		},
	}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
func CreateTrainerSelectionKeyboard(trainers []database.Trainer) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 5 –Ω–∞ —Ä—è–¥)
	for i := 0; i < len(trainers); i += 5 {
		var row []inlineKeyboardButton
		for j := i; j < i+5 && j < len(trainers); j++ {
			trainer := trainers[j]
			buttonText := fmt.Sprintf("%d. %s", j+1, trainer.Name)
			if len(buttonText) > 20 {
				buttonText = buttonText[:17] + "..."
			}
			row = append(row, inlineKeyboardButton{
				Text:         buttonText,
				CallbackData: fmt.Sprintf("selectTrainer_%d", trainer.ID),
			})
		}
		buttons = append(buttons, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ç—Ä–µ–Ω–µ—Ä–∞–º", CallbackData: "trainersMenu"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrainerEditKeyboard(trainerId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚úèÔ∏è –§–ò–û", CallbackData: fmt.Sprintf("editTrainerName_%d", trainerId)},
				{Text: "üì± Telegram ID", CallbackData: fmt.Sprintf("editTrainerTgId_%d", trainerId)},
			},
			{
				{Text: "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", CallbackData: fmt.Sprintf("editTrainerInfo_%d", trainerId)},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ç—Ä–µ–Ω–µ—Ä–∞–º", CallbackData: "trainersMenu"},
			},
		},
	}
}

func CreateTrainerDeletionKeyboard(trainers []database.Trainer) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 3 –Ω–∞ —Ä—è–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
	for i := 0; i < len(trainers); i += 3 {
		var row []inlineKeyboardButton
		for j := i; j < i+3 && j < len(trainers); j++ {
			trainer := trainers[j]
			buttonText := fmt.Sprintf("üóëÔ∏è %s", trainer.Name)
			if len(buttonText) > 20 {
				buttonText = buttonText[:17] + "..."
			}
			row = append(row, inlineKeyboardButton{
				Text:         buttonText,
				CallbackData: fmt.Sprintf("deleteTrainer_%d", trainer.ID),
			})
		}
		buttons = append(buttons, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ç—Ä–µ–Ω–µ—Ä–∞–º", CallbackData: "trainersMenu"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateDeletionConfirmationKeyboard(trainerId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", CallbackData: fmt.Sprintf("confirmDelete_%d", trainerId)},
				{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "trainersMenu"},
			},
		},
	}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Å—Å–∞–º–∏
func CreateTrackSelectionKeyboard(tracks []database.Track) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞—Å—Å—ã (–º–∞–∫—Å–∏–º—É–º 5 –Ω–∞ —Ä—è–¥)
	for i := 0; i < len(tracks); i += 5 {
		var row []inlineKeyboardButton
		for j := i; j < i+5 && j < len(tracks); j++ {
			track := tracks[j]
			buttonText := fmt.Sprintf("%d. %s", j+1, track.Name)
			if len(buttonText) > 20 {
				buttonText = buttonText[:17] + "..."
			}
			row = append(row, inlineKeyboardButton{
				Text:         buttonText,
				CallbackData: fmt.Sprintf("selectTrack_%d", track.ID),
			})
		}
		buttons = append(buttons, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ç—Ä–∞—Å—Å–∞–º", CallbackData: "tracksMenu"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrackEditKeyboard(trackId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", CallbackData: fmt.Sprintf("editTrackName_%d", trackId)},
				{Text: "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", CallbackData: fmt.Sprintf("editTrackInfo_%d", trackId)},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ç—Ä–∞—Å—Å–∞–º", CallbackData: "tracksMenu"},
			},
		},
	}
}

func CreateTrackDeletionKeyboard(tracks []database.Track) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞—Å—Å—ã (–º–∞–∫—Å–∏–º—É–º 3 –Ω–∞ —Ä—è–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
	for i := 0; i < len(tracks); i += 3 {
		var row []inlineKeyboardButton
		for j := i; j < i+3 && j < len(tracks); j++ {
			track := tracks[j]
			buttonText := fmt.Sprintf("%d. %s", j+1, track.Name)
			if len(buttonText) > 15 {
				buttonText = buttonText[:12] + "..."
			}
			row = append(row, inlineKeyboardButton{
				Text:         buttonText,
				CallbackData: fmt.Sprintf("deleteTrack_%d", track.ID),
			})
		}
		buttons = append(buttons, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ç—Ä–∞—Å—Å–∞–º", CallbackData: "tracksMenu"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrackDeletionConfirmationKeyboard(trackId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", CallbackData: fmt.Sprintf("confirmDeleteTrack_%d", trackId)},
				{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "tracksMenu"},
			},
		},
	}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
func CreateTrainingSelectionKeyboard(trainings []database.Training) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–º–∞–∫—Å–∏–º—É–º 2 –Ω–∞ —Ä—è–¥)
	for i := 0; i < len(trainings); i += 2 {
		var row []inlineKeyboardButton
		for j := i; j < i+2 && j < len(trainings); j++ {
			training := trainings[j]
			buttonText := fmt.Sprintf("üèÉ‚Äç‚ôÇÔ∏è %d", j+1)
			row = append(row, inlineKeyboardButton{
				Text:         buttonText,
				CallbackData: fmt.Sprintf("selectTraining_%d", training.ID),
			})
		}
		buttons = append(buttons, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: "start"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrainingRegistrationConfirmationKeyboard(trainingId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", CallbackData: fmt.Sprintf("confirmTrainingRegistration_%d", trainingId)},
				{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "cancel"},
			},
		},
	}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫)
func CreateTrainingApprovalKeyboard(registrationId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", CallbackData: fmt.Sprintf("approveRegistration_%d", registrationId)},
				{Text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", CallbackData: fmt.Sprintf("rejectRegistration_%d", registrationId)},
			},
		},
	}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
func CreateTrainerSelectionForTrainingKeyboard(trainers []database.Trainer) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 3 –Ω–∞ —Ä—è–¥)
	for i := 0; i < len(trainers); i += 3 {
		var row []inlineKeyboardButton
		for j := i; j < i+3 && j < len(trainers); j++ {
			trainer := trainers[j]
			buttonText := fmt.Sprintf("%d. %s", j+1, trainer.Name)
			if len(buttonText) > 20 {
				buttonText = buttonText[:17] + "..."
			}
			row = append(row, inlineKeyboardButton{
				Text:         buttonText,
				CallbackData: fmt.Sprintf("selectTrainerForTraining_%d", trainer.ID),
			})
		}
		buttons = append(buttons, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", CallbackData: "scheduleMenu"},
		{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "cancel"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrackSelectionForTrainingKeyboard(tracks []database.Track) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞—Å—Å—ã (–º–∞–∫—Å–∏–º—É–º 3 –Ω–∞ —Ä—è–¥)
	for i := 0; i < len(tracks); i += 3 {
		var row []inlineKeyboardButton
		for j := i; j < i+3 && j < len(tracks); j++ {
			track := tracks[j]
			buttonText := fmt.Sprintf("%d. %s", j+1, track.Name)
			if len(buttonText) > 20 {
				buttonText = buttonText[:17] + "..."
			}
			row = append(row, inlineKeyboardButton{
				Text:         buttonText,
				CallbackData: fmt.Sprintf("selectTrackForTraining_%d", track.ID),
			})
		}
		buttons = append(buttons, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", CallbackData: "scheduleMenu"},
		{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "cancel"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
func CreateTrainingEditSelectionKeyboard(trainings []database.Training) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–º–∞–∫—Å–∏–º—É–º 2 –Ω–∞ —Ä—è–¥)
	for i := 0; i < len(trainings); i += 2 {
		var row []inlineKeyboardButton
		for j := i; j < i+2 && j < len(trainings); j++ {
			training := trainings[j]
			buttonText := fmt.Sprintf("üèÉ‚Äç‚ôÇÔ∏è %d", j+1)
			row = append(row, inlineKeyboardButton{
				Text:         buttonText,
				CallbackData: fmt.Sprintf("editTraining_%d", training.ID),
			})
		}
		buttons = append(buttons, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", CallbackData: "scheduleMenu"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrainingEditKeyboard(trainingId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", CallbackData: fmt.Sprintf("editTrainingDate_%d", trainingId)},
				{Text: "üë• –ò–∑–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", CallbackData: fmt.Sprintf("editTrainingParticipants_%d", trainingId)},
			},
			{
				{Text: "üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", CallbackData: fmt.Sprintf("toggleTrainingStatus_%d", trainingId)},
			},
			{
				{Text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", CallbackData: fmt.Sprintf("deleteTraining_%d", trainingId)},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", CallbackData: "scheduleMenu"},
			},
		},
	}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
func CreateTrackSelectionForRegistrationKeyboard(tracks []database.Track) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞—Å—Å—ã (–º–∞–∫—Å–∏–º—É–º 2 –Ω–∞ —Ä—è–¥)
	for i := 0; i < len(tracks); i += 2 {
		var row []inlineKeyboardButton
		for j := i; j < i+2 && j < len(tracks); j++ {
			track := tracks[j]
			buttonText := fmt.Sprintf("üèÅ %s", track.Name)
			if len(buttonText) > 20 {
				buttonText = buttonText[:17] + "..."
			}
			row = append(row, inlineKeyboardButton{
				Text:         buttonText,
				CallbackData: fmt.Sprintf("selectTrackForRegistration_%d", track.ID),
			})
		}
		buttons = append(buttons, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: "start"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrainerSelectionForRegistrationKeyboard(trainers []database.Trainer) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 2 –Ω–∞ —Ä—è–¥)
	for i := 0; i < len(trainers); i += 2 {
		var row []inlineKeyboardButton
		for j := i; j < i+2 && j < len(trainers); j++ {
			trainer := trainers[j]
			buttonText := fmt.Sprintf("üë®‚Äçüè´ %s", trainer.Name)
			if len(buttonText) > 20 {
				buttonText = buttonText[:17] + "..."
			}
			row = append(row, inlineKeyboardButton{
				Text:         buttonText,
				CallbackData: fmt.Sprintf("selectTrainerForRegistration_%d", trainer.ID),
			})
		}
		buttons = append(buttons, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–∞—Å—Å—ã", CallbackData: "backToTrackSelection"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrainingTimeSelectionKeyboard(trainings []database.Training) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–º–∞–∫—Å–∏–º—É–º 1 –Ω–∞ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
	for _, training := range trainings {
		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
		buttonText := fmt.Sprintf("üìÖ %s", training.Time.Format("02.01 15:04"))
		row := []inlineKeyboardButton{
			{
				Text:         buttonText,
				CallbackData: fmt.Sprintf("selectTrainingTimeForRegistration_%d", training.ID),
			},
		}
		buttons = append(buttons, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–µ–Ω–µ—Ä–∞", CallbackData: "backToTrainerSelection"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}
