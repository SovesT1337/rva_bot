package telegram

import (
	"fmt"

	"x.localhost/rvabot/internal/database"
)

// createBackButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
func createBackButton(callbackData string) inlineKeyboardButton {
	return inlineKeyboardButton{
		Text:         "üîô –ù–∞–∑–∞–¥",
		CallbackData: callbackData,
	}
}

// createCancelButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
func createCancelButton() inlineKeyboardButton {
	return inlineKeyboardButton{
		Text:         "‚ùå –û—Ç–º–µ–Ω–∞",
		CallbackData: "cancel",
	}
}

// createConfirmButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
func createConfirmButton() inlineKeyboardButton {
	return inlineKeyboardButton{
		Text:         "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
		CallbackData: "confirm",
	}
}

// createHomeButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
func createHomeButton() inlineKeyboardButton {
	return inlineKeyboardButton{
		Text:         "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
		CallbackData: "start",
	}
}

// createKeyboardWithBack —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
func createKeyboardWithBack(backCallback string) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{createBackButton(backCallback)},
		},
	}
}

// createKeyboardWithCancel —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
func createKeyboardWithCancel() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{createCancelButton()},
		},
	}
}

// createConfirmationKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
func createConfirmationKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{createConfirmButton(), createCancelButton()},
		},
	}
}

func CreateBaseKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{createHomeButton()},
		},
	}
}

func CreateNavigationKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				createHomeButton(),
				{Text: "‚ùì –ü–æ–º–æ—â—å", CallbackData: "help"},
			},
		},
	}
}

func CreateBackToAdminKeyboard() inlineKeyboardMarkup {
	return createKeyboardWithBack("admin")
}

func CreateBackToInfoKeyboard() inlineKeyboardMarkup {
	return createKeyboardWithBack("Info")
}

func CreateBackToTrainersMenuKeyboard() inlineKeyboardMarkup {
	return createKeyboardWithBack("trainersMenu")
}

func CreateBackToTracksMenuKeyboard() inlineKeyboardMarkup {
	return createKeyboardWithBack("tracksMenu")
}

func CreateBackToScheduleMenuKeyboard() inlineKeyboardMarkup {
	return createKeyboardWithBack("scheduleMenu")
}

func CreateCancelKeyboard() inlineKeyboardMarkup {
	return createKeyboardWithCancel()
}

func CreateStartKeyboard(chatId int, repo database.ContentRepositoryInterface) inlineKeyboardMarkup {
	keyboard := [][]inlineKeyboardButton{
		{
			{Text: "üèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", CallbackData: "BookTraining"},
		},
		{
			{Text: "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", CallbackData: "suggestTraining"},
		},
		{
			{Text: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö", CallbackData: "Info"},
		},
		{
			{Text: "üõí –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞", URL: "https://dudarevmotorsport.ru/"},
		},
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if database.IsAdmin(chatId, repo) {
		keyboard = append(keyboard, []inlineKeyboardButton{
			{Text: "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", CallbackData: "admin"},
		})
	}

	return inlineKeyboardMarkup{InlineKeyboard: keyboard}
}

func CreateAdminKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—ã", CallbackData: "trainersMenu"},
				{Text: "üèÅ –¢—Ä–∞—Å—Å—ã", CallbackData: "tracksMenu"},
			},
			{
				{Text: "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", CallbackData: "scheduleMenu"},
			},
			{
				{Text: "üí¨ –ó–∞–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", CallbackData: "trainingRequests"},
			},
			{
				{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: "start"},
			},
		},
	}
}

func CreateTrainersListWithActionsKeyboard(trainers []database.Trainer) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞" –≤ –Ω–∞—á–∞–ª–µ
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞", CallbackData: "createTrainer"},
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
	for i, trainer := range trainers {
		// –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –∏–º–µ–Ω–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
		buttons = append(buttons, []inlineKeyboardButton{
			{Text: fmt.Sprintf("%d. ‚úèÔ∏è %s", i+1, trainer.Name), CallbackData: fmt.Sprintf("editTrainerName_%d", trainer.ID)},
		})
		// –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
		buttons = append(buttons, []inlineKeyboardButton{
			{Text: "üì±", CallbackData: fmt.Sprintf("editTrainerTgId_%d", trainer.ID)},
			{Text: "üìÑ", CallbackData: fmt.Sprintf("editTrainerInfo_%d", trainer.ID)},
			{Text: "üóëÔ∏è", CallbackData: fmt.Sprintf("deleteTrainer_%d", trainer.ID)},
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ", CallbackData: "admin"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTracksListWithActionsKeyboard(tracks []database.Track) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Å—Å—É" –≤ –Ω–∞—á–∞–ª–µ
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Å—Å—É", CallbackData: "createTrack"},
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞—Å—Å—ã
	for i, track := range tracks {
		// –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç—Ä–∞—Å—Å—ã
		buttons = append(buttons, []inlineKeyboardButton{
			{Text: fmt.Sprintf("%d. ‚úèÔ∏è %s", i+1, track.Name), CallbackData: fmt.Sprintf("editTrackName_%d", track.ID)},
		})
		// –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
		buttons = append(buttons, []inlineKeyboardButton{
			{Text: "üìÑ", CallbackData: fmt.Sprintf("editTrackInfo_%d", track.ID)},
			{Text: "üóëÔ∏è", CallbackData: fmt.Sprintf("deleteTrack_%d", track.ID)},
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ", CallbackData: "admin"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrainingsListWithActionsKeyboard(trainings []database.Training) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" –≤ –Ω–∞—á–∞–ª–µ
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", CallbackData: "createSchedule"},
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
	for i, training := range trainings {
		statusIcon := "üü¢"
		if !training.IsActive {
			statusIcon = "üî¥"
		}
		buttons = append(buttons, []inlineKeyboardButton{
			{Text: fmt.Sprintf("%d. %s %s", i+1, statusIcon, training.StartTime.Format("02.01 15:04")), CallbackData: fmt.Sprintf("editTraining_%d", training.ID)},
			{Text: "üóëÔ∏è", CallbackData: fmt.Sprintf("deleteTraining_%d", training.ID)},
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ", CallbackData: "admin"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateInfoKeyboard() inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤", CallbackData: "infoTrainer"},
			},
			{
				{Text: "üèÅ –¢—Ä–∞—Å—Å—ã", CallbackData: "infoTrack"},
			},
			{
				{Text: "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", CallbackData: "viewScheduleUser"},
			},
			{
				{Text: "üìã –§–æ—Ä–º–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", CallbackData: "infoFormat"},
			},
			{
				{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: "start"},
			},
		},
	}
}

func CreateConfirmationKeyboard() inlineKeyboardMarkup {
	return createConfirmationKeyboard()
}

func CreateTrainerEditKeyboard(trainerId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚úèÔ∏è –§–ò–û", CallbackData: fmt.Sprintf("editTrainerName_%d", trainerId)},
				{Text: "üì± Telegram ID", CallbackData: fmt.Sprintf("editTrainerTgId_%d", trainerId)},
			},
			{
				{Text: "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", CallbackData: fmt.Sprintf("editTrainerInfo_%d", trainerId)},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ç—Ä–µ–Ω–µ—Ä–∞–º", CallbackData: "trainersMenu"},
			},
		},
	}
}

func CreateDeletionConfirmationKeyboard(trainerId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", CallbackData: fmt.Sprintf("confirmDelete_%d", trainerId)},
				{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "trainersMenu"},
			},
		},
	}
}

func CreateTrainingDeletionConfirmationKeyboard(trainingId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", CallbackData: fmt.Sprintf("confirmDeleteTraining_%d", trainingId)},
				{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "scheduleMenu"},
			},
		},
	}
}

func CreateTrackEditKeyboard(trackId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", CallbackData: fmt.Sprintf("editTrackName_%d", trackId)},
				{Text: "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", CallbackData: fmt.Sprintf("editTrackInfo_%d", trackId)},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ç—Ä–∞—Å—Å–∞–º", CallbackData: "tracksMenu"},
			},
		},
	}
}

func CreateTrackDeletionConfirmationKeyboard(trackId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", CallbackData: fmt.Sprintf("confirmDeleteTrack_%d", trackId)},
				{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "tracksMenu"},
			},
		},
	}
}

func CreateTrainingRegistrationConfirmationKeyboard(trainingId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", CallbackData: fmt.Sprintf("confirmTrainingRegistration_%d", trainingId)},
				{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "cancel"},
			},
		},
	}
}

func CreateTrainingApprovalKeyboard(registrationId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", CallbackData: fmt.Sprintf("approveRegistration_%d", registrationId)},
				{Text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", CallbackData: fmt.Sprintf("rejectRegistration_%d", registrationId)},
			},
		},
	}
}

func CreateTrainerSelectionForTrainingKeyboard(trainers []database.Trainer) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	for _, t := range trainers {
		buttons = append(buttons, []inlineKeyboardButton{{
			Text:         t.Name,
			CallbackData: fmt.Sprintf("selectTrainerForTraining_%d", t.ID),
		}})
	}

	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", CallbackData: "scheduleMenu"},
		{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "cancel"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrackSelectionForTrainingKeyboard(tracks []database.Track) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	for _, t := range tracks {
		buttons = append(buttons, []inlineKeyboardButton{{
			Text:         t.Name,
			CallbackData: fmt.Sprintf("selectTrackForTraining_%d", t.ID),
		}})
	}

	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", CallbackData: "scheduleMenu"},
		{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "cancel"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrainingEditKeyboard(trainingId uint) inlineKeyboardMarkup {
	return inlineKeyboardMarkup{
		InlineKeyboard: [][]inlineKeyboardButton{
			{
				{Text: "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", CallbackData: fmt.Sprintf("editTrainingDate_%d", trainingId)},
				{Text: "üë• –ò–∑–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", CallbackData: fmt.Sprintf("editTrainingParticipants_%d", trainingId)},
			},
			{
				{Text: "üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", CallbackData: fmt.Sprintf("toggleTrainingStatus_%d", trainingId)},
			},
			{
				{Text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", CallbackData: fmt.Sprintf("deleteTraining_%d", trainingId)},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", CallbackData: "scheduleMenu"},
			},
		},
	}
}

func CreateTrackSelectionForRegistrationKeyboard(tracks []database.Track) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	for _, t := range tracks {
		buttons = append(buttons, []inlineKeyboardButton{{
			Text:         t.Name,
			CallbackData: fmt.Sprintf("selectTrackForRegistration_%d", t.ID),
		}})
	}

	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: "start"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrainerSelectionForRegistrationKeyboard(trainers []database.Trainer) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	for _, t := range trainers {
		buttons = append(buttons, []inlineKeyboardButton{{
			Text:         t.Name,
			CallbackData: fmt.Sprintf("selectTrainerForRegistration_%d", t.ID),
		}})
	}

	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–∞—Å—Å—ã", CallbackData: "backToTrackSelection"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrainingTimeSelectionKeyboard(trainings []database.Training) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	for _, t := range trainings {
		buttons = append(buttons, []inlineKeyboardButton{{
			Text:         t.StartTime.Format("02.01 15:04"),
			CallbackData: fmt.Sprintf("selectTrainingTimeForRegistration_%d", t.ID),
		}})
	}

	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–µ–Ω–µ—Ä–∞", CallbackData: "backToTrainerSelection"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}

func CreateTrainingRequestsKeyboard(requests []database.TrainingRequest) inlineKeyboardMarkup {
	var buttons [][]inlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
	for i, request := range requests {
		buttons = append(buttons, []inlineKeyboardButton{
			{Text: fmt.Sprintf("%d. üë§ –ó–∞–ø—Ä–æ—Å", i+1), CallbackData: fmt.Sprintf("markRequestReviewed_%d", request.ID)},
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ"
	buttons = append(buttons, []inlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ", CallbackData: "admin"},
	})

	return inlineKeyboardMarkup{InlineKeyboard: buttons}
}
